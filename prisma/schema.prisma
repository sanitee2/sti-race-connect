generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model organizations {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  address      String?
  logo_url     String? // URL to organization logo in Digital Ocean Spaces
  website      String?
  phone_number String?
  email        String?
  social_media Json?
  is_verified  Boolean              @default(false)
  created_at   DateTime             @default(now())
  updated_at   DateTime             @updatedAt
  created_by   String               @db.ObjectId
  creator      users                @relation("OrganizationCreator", fields: [created_by], references: [id])
  members      user_organization[]  @relation("OrganizationMembers")
  roles        organization_roles[] @relation("OrganizationRoles")
}

model users {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String              @unique
  password              String
  phone                 String?
  address               String?
  phone_number          String?
  profile_picture       String? // URL to profile picture in Digital Ocean Spaces
  role                  Role                @default(Guest)
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt
  runner_profile        runner_profile?
  marshal_profile       marshal_profile?
  created_events        events[]            @relation("CreatedBy")
  created_categories    event_categories[]  @relation("CategoryCreatedBy")
  event_staff           event_staff[]       @relation("StaffMember")
  participants          participants[]      @relation("UserParticipant")
  created_organizations organizations[]     @relation("OrganizationCreator")
  organizations         user_organization[] @relation("UserOrganizations")
  settings              user_settings?

  @@map("users")
}

model runner_profile {
  id                             String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id                        String     @unique @db.ObjectId
  date_of_birth                  DateTime
  gender                         Gender
  address                        String
  tshirt_size                    TshirtSize
  emergency_contact_name         String
  emergency_contact_phone        String
  emergency_contact_relationship String
  user                           users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model marshal_profile {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id            String   @unique @db.ObjectId
  date_of_birth      DateTime
  gender             Gender
  address            String?
  organization_name  String
  role_position      String
  social_media_links String?
  responsibilities   String
  user               users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model events {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  event_name       String
  event_date       DateTime
  location         String
  target_audience  String
  description      String
  cover_image      String? // URL to event cover image in Digital Ocean Spaces
  gallery_images   String[] // Array of URLs to event gallery images in Digital Ocean Spaces
  created_by       String              @db.ObjectId
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  creator          users               @relation("CreatedBy", fields: [created_by], references: [id])
  event_categories event_to_category[]
  event_staff      event_staff[]       @relation("EventStaff")
  participants     participants[]      @relation("EventParticipants")
}

model event_categories {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  category_name   String
  description     String
  target_audience String
  category_image  String? // URL to category image in Digital Ocean Spaces
  created_by      String              @db.ObjectId
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt
  creator         users               @relation("CategoryCreatedBy", fields: [created_by], references: [id])
  events          event_to_category[]
  participants    participants[]      @relation("CategoryParticipant")
  results         results[]           @relation("CategoryResults")
}

model event_staff {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  event_id         String    @db.ObjectId
  user_id          String    @db.ObjectId
  role_in_event    StaffRole
  responsibilities String
  assigned_at      DateTime  @default(now())
  event            events    @relation("EventStaff", fields: [event_id], references: [id], onDelete: Cascade)
  user             users     @relation("StaffMember", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_id])
}

model participants {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  user_id             String             @db.ObjectId
  event_id            String             @db.ObjectId
  rfid_number         String?
  category_id         String             @db.ObjectId
  payment_status      PaymentStatus      @default(Pending)
  registration_status RegistrationStatus @default(Pending)
  registered_at       DateTime           @default(now())
  user                users              @relation("UserParticipant", fields: [user_id], references: [id], onDelete: Cascade)
  event               events             @relation("EventParticipants", fields: [event_id], references: [id])
  category            event_categories   @relation("CategoryParticipant", fields: [category_id], references: [id])
  results             results[]          @relation("ParticipantResults")

  @@unique([user_id, event_id, category_id])
}

model results {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  participant_id  String           @db.ObjectId
  category_id     String           @db.ObjectId
  completion_time String // Stored as string in format "HH:MM:SS.ms"
  ranking         Int?
  notes           String?
  recorded_at     DateTime         @default(now())
  participant     participants     @relation("ParticipantResults", fields: [participant_id], references: [id], onDelete: Cascade)
  category        event_categories @relation("CategoryResults", fields: [category_id], references: [id])

  @@unique([participant_id, category_id])
}

// Junction model for many-to-many relationship between events and categories
model event_to_category {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  event_id    String           @db.ObjectId
  category_id String           @db.ObjectId
  event       events           @relation(fields: [event_id], references: [id], onDelete: Cascade)
  category    event_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([event_id, category_id])
}

// Junction model for many-to-many relationship between users and organizations
model user_organization {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  user_id          String            @db.ObjectId
  organization_id  String            @db.ObjectId
  membership_role  OrgRole           @default(Member) // Base membership role (Member, Admin, Owner)
  joined_at        DateTime          @default(now())
  invited_by       String?           @db.ObjectId // ID of user who invited this member
  user             users             @relation("UserOrganizations", fields: [user_id], references: [id], onDelete: Cascade)
  organization     organizations     @relation("OrganizationMembers", fields: [organization_id], references: [id], onDelete: Cascade)
  role_assignments role_assignment[] @relation("MemberRoleAssignments")

  @@unique([user_id, organization_id])
}

// Model for defining specific positions/roles within organizations
model organization_roles {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  organization_id    String            @db.ObjectId
  title              String // e.g. "President", "Secretary", "Treasurer", etc.
  description        String?
  permissions        Json? // Store custom permissions as a JSON object
  is_leadership      Boolean           @default(false)
  is_default         Boolean           @default(false) // When true, automatically assigned to new members
  can_be_assigned_by Json? // Store which roles can assign this role (array of OrgRole enum values)
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  organization       organizations     @relation("OrganizationRoles", fields: [organization_id], references: [id], onDelete: Cascade)
  assignments        role_assignment[] @relation("RoleAssignments")

  @@unique([organization_id, title])
}

// Junction model for role assignments
model role_assignment {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  member_id   String             @db.ObjectId
  role_id     String             @db.ObjectId
  assigned_at DateTime           @default(now())
  assigned_by String?            @db.ObjectId // ID of the user who assigned this role
  expires_at  DateTime?
  is_primary  Boolean            @default(false) // Mark as primary role for this member
  member      user_organization  @relation("MemberRoleAssignments", fields: [member_id], references: [id], onDelete: Cascade)
  role        organization_roles @relation("RoleAssignments", fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([member_id, role_id])
}

model user_settings {
  id                  String   @id @default(uuid()) @map("_id")
  user_id            String   @unique
  notifications      Json     @default("{\"email\":true,\"push\":true,\"eventReminders\":true,\"updates\":false}")
  appearance         Json     @default("{\"theme\":\"system\",\"fontSize\":\"normal\",\"reducedMotion\":false}")
  security           Json     @default("{\"twoFactorEnabled\":false}")
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

enum Role {
  Guest
  Runner
  Marshal
  Admin
}

enum Gender {
  Male
  Female
  Other
}

enum TshirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

enum StaffRole {
  EventMarshal
  SubMarshal
  Coordinator
}

enum PaymentStatus {
  Pending
  Paid
  Verified
}

enum RegistrationStatus {
  Pending
  Approved
  Rejected
}

enum OrgRole {
  Owner
  Admin
  Member
}
